#!/bin/bash

# Ensure we're running as root
if [ "$(id -u)" -ne 0 ]; then
  echo "This script must be run as root or with sudo!" 
  exit 1
fi

# Variables
BASE_DIR="/archstep"
WORK_DIR="$BASE_DIR/arch-chroot-iso"

CHROOT_DIR="$WORK_DIR/arch-chroot"
ARCH_DIR="$WORK_DIR/arch"
SQUASHFS_DIR="$ARCH_DIR/x86_64"
SQUASHFS_IMG="$SQUASHFS_DIR/airootfs.sfs"
BOOT_DIR="$ARCH_DIR/boot/x86_64"
EFI_DIR="$WORK_DIR/EFI"
EFI_BOOT_DIR="$EFI_DIR/BOOT"
LOADER_DIR="$WORK_DIR/loader"
LOADER_ENTRIES_DIR="$LOADER_DIR/entries"

ESP_DIR="$BASE_DIR/ESP"
ESP_IMG="$ESP_DIR/esp.img"
ESP_MNT="$WORK_DIR/mnt/esp"
ESP_BOOT_DIR="$ESP_MNT/arch/boot/x86_64"
ESP_EFI_BOOT_DIR="$ESP_MNT/EFI/BOOT"
ESP_LOADER_DIR="$ESP_MNT/loader"
ESP_LOADER_ENTRIES_DIR="$ESP_LOADER_DIR/entries"

ISO_OUTPUT_DIR="$BASE_DIR/arch-iso-output"
ISO_NAME="arch-chroot.iso"

# Cleanup previous runs
umount "$ESP_MNT"
rm -rf "$BASE_DIR"

# Set up Arch Linux chroot environment
echo "Setting up Arch Linux chroot environment..."

# Create necessary directories
mkdir -p "$CHROOT_DIR"
mkdir -p "$ARCH_DIR"
mkdir -p "$SQUASHFS_DIR"
mkdir -p "$BOOT_DIR"
mkdir -p "$EFI_DIR"
mkdir -p "$EFI_BOOT_DIR"
mkdir -p "$LOADER_DIR"
mkdir -p "$LOADER_ENTRIES_DIR"

mkdir -p "$ESP_DIR"
mkdir -p "$ESP_MNT"

mkdir -p "$ISO_OUTPUT_DIR"

# Bootstrap Arch Linux base system with LTS kernel and bash
pacstrap -c $CHROOT_DIR base linux-lts bash

# Enter chroot environment and configure system
echo "Entering chroot environment with systemd-nspawn..."
systemd-nspawn -D "$CHROOT_DIR" \
    bash -c "ln -sf /usr/share/zoneinfo/UTC /etc/localtime &&
             echo 'en_US.UTF-8 UTF-8' > /etc/locale.gen &&
             locale-gen &&
             echo 'LANG=en_US.UTF-8' > /etc/locale.conf &&
             export LANG=en_US.UTF-8 &&
             echo 'arch-chroot' > /etc/hostname"

# Create a SquashFS image of the chroot environment
echo "Creating SquashFS image of the chroot environment..."
mksquashfs "$CHROOT_DIR" "$SQUASHFS_IMG" -b 1M -comp xz

# Set up the boot directory structure for BIOS and UEFI
echo "Setting up systemd-boot and kernel..."

# Create systemd-boot entries
cat > "$LOADER_ENTRIES_DIR/arch-live.conf" <<EOF
title   Arch Linux Live
linux   /arch/boot/x86_64/vmlinuz-linux-lts
initrd  /arch/boot/x86_64/initramfs-linux-lts.img
options  archisobasedir=arch archisosearchuuid=2025-03-01-17-40-22-00
EOF

cat > "$LOADER_DIR/loader.conf" <<EOF
default arch-live.conf
timeout 5
EOF

# This may not be needed but testing
mkdir "$WORK_DIR/boot"
touch "$WORK_DIR/boot/2025-03-01-17-40-22-00.uuid"

# Copy boot file
cp "$CHROOT_DIR/usr/lib/systemd/boot/efi/systemd-bootx64.efi" "$EFI_BOOT_DIR/BOOTx64.EFI"

# Copy kernel files
cp "$CHROOT_DIR/boot/vmlinuz-linux-lts" "$BOOT_DIR/vmlinuz-linux-lts"
cp "$CHROOT_DIR/boot/initramfs-linux-lts.img" "$BOOT_DIR/initramfs-linux-lts.img"

# Create the FAT32 image for the EFI System Partition (ESP)
echo "Creating FAT32 image for EFI partition..."
dd if=/dev/zero of="$ESP_IMG" bs=1M count=100  # Create a 100MB FAT32 partition image
mkfs.fat -F32 "$ESP_IMG"  # Format the image as FAT32

# Mount the FAT32 image to copy systemd-boot files into it
mount "$ESP_IMG" "$ESP_MNT"
mkdir -p "$ESP_BOOT_DIR"
mkdir -p "$ESP_EFI_BOOT_DIR"
mkdir -p "$ESP_LOADER_DIR"
mkdir -p "$ESP_LOADER_ENTRIES_DIR"

cp -R "$LOADER_DIR"/* "$ESP_LOADER_DIR"
cp -R "$EFI_BOOT_DIR"/* "$ESP_EFI_BOOT_DIR"
cp -R "$BOOT_DIR"/* "$ESP_BOOT_DIR"

# Unmount the ESP image
echo "Unmounting ESP image..."
umount "$WORK_DIR/mnt/esp"

cp "$ESP_IMG" "$WORK_DIR"

# Create the ISO using xorriso
echo "Building ISO..."
xorriso -as mkisofs -o "$ISO_OUTPUT_DIR/$ISO_NAME" \
  -R -J -l \
  -eltorito-alt-boot \
  -e esp.img \
  -no-emul-boot \
  "$WORK_DIR"

echo "ISO built at: $ISO_OUTPUT_DIR/$ISO_NAME"