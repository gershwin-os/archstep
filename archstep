#!/bin/bash

# Ensure we're running as root
if [ "$(id -u)" -ne 0 ]; then
  echo "This script must be run as root or with sudo!" 
  exit 1
fi

# Variables
BASE_DIR="/archstep"
ESP_DIR="$BASE_DIR/ESP"
ESP_IMG="$ESPDIR/esp.img"
WORK_DIR="$BASE_DIR/arch-chroot-iso"      # Custom working directory
ESP_MNT="$WORK_DIR/mnt/esp"
ISO_OUTPUT_DIR="$BASE_DIR/arch-iso-output"  # Custom output directory
CHROOT_DIR="$WORK_DIR/arch-chroot"
ISO_NAME="arch-chroot.iso"
SQUASHFS_IMG="$WORK_DIR/rootfs.squashfs"
BOOT_DIR="$WORK_DIR/boot"
EFI_DIR="$WORK_DIR/EFI/boot"

# Cleanup previous runs
umount "$ESP_MNT"
rm -rf "$BASE_DIR"

# Set up Arch Linux chroot environment
echo "Setting up Arch Linux chroot environment..."

# Create necessary directories
mkdir -p "$ESP_DIR"
mkdir -p "$CHROOT_DIR"
mkdir -p "$ESP_MNT"
mkdir -p "$BOOT_DIR"
mkdir -p "$ISO_OUTPUT_DIR"

# Bootstrap Arch Linux base system with LTS kernel and bash
pacstrap -c $CHROOT_DIR base linux-lts bash refind efibootmgr

# Enter chroot environment and configure system
echo "Entering chroot environment with systemd-nspawn..."
systemd-nspawn -D "$CHROOT_DIR" \
    bash -c "ln -sf /usr/share/zoneinfo/UTC /etc/localtime &&
             echo 'en_US.UTF-8 UTF-8' > /etc/locale.gen &&
             locale-gen &&
             echo 'LANG=en_US.UTF-8' > /etc/locale.conf &&
             export LANG=en_US.UTF-8 &&
             echo 'arch-chroot' > /etc/hostname"

# Install GRUB inside chroot to ensure we have the GRUB bootloader and related files
# echo "Installing GRUB in chroot..."
# pacstrap -c "$WORK_DIR" grub os-prober linux-lts

# # Create a SquashFS image of the chroot environment
echo "Creating SquashFS image of the chroot environment..."
mksquashfs "$CHROOT_DIR" "$SQUASHFS_IMG" -b 1M -comp xz

# # Set up the boot directory structure for BIOS and UEFI
echo "Setting up bootloader and kernel..."

# # Copy kernel and initramfs into the boot directory
cp "$CHROOT_DIR/boot/vmlinuz-linux-lts" "$BOOT_DIR/vmlinuz"
cp "$CHROOT_DIR/boot/initramfs-linux-lts.img" "$BOOT_DIR/initramfs.img"

# Create the FAT32 image for the EFI System Partition (ESP)
echo "Creating FAT32 image for EFI partition..."
mkdir -p "$ESP_DIR/ESP"
dd if=/dev/zero of="$ESP_IMG" bs=1M count=100  # Create a 100MB FAT32 partition image
mkfs.fat -F32 "$ESP_IMG"  # Format the image as FAT32

# Mount the FAT32 image to copy rEFInd files into it
mkdir -p "$WORK_DIR/mnt/esp"
mount "$ESP_IMG" "$WORK_DIR/mnt/esp"

# Copy rEFInd files into the ESP for USB and ISO
echo "Copying rEFInd files into the ESP..."
mkdir -p "$WORK_DIR/mnt/esp/EFI/boot"
mkdir -p "$WORK_DIR/EFI/boot"
cp -r "$CHROOT_DIR/usr/share/refind" "$WORK_DIR/mnt/esp/EFI/boot"
cp -r "$CHROOT_DIR/usr/share/refind" "$WORK_DIR/EFI/boot"
mv "$WORK_DIR/mnt/esp/EFI/boot/refind/refind_x64.efi" "$WORK_DIR/mnt/esp/EFI/boot/bootx64.efi"
cp "$WORK_DIR/mnt/esp/EFI/boot/bootx64.efi" "$WORK_DIR/EFI/boot/bootx64.efi"
cp /home/jmaloney/Projects/pkgdemon/archstep/refind.conf "$WORK_DIR/mnt/esp/EFI/boot/refind.conf"
cp /home/jmaloney/Projects/pkgdemon/archstep/refind.conf "$WORK_DIR/EFI/boot/refind.conf"
#cp "$CHROOT_DIR/usr/share/refind/refind.conf-sample" "$WORK_DIR/mnt/esp/EFI/boot/refind.conf"
#cp "$CHROOT_DIR/usr/share/refind/refind.conf-sample" "$WORK_DIR/EFI/boot/refind.conf"

# Unmount the ESP image
echo "Unmounting ESP image..."
umount "$ESP_MNT"

xorriso -as mkisofs -o "$ISO_OUTPUT_DIR/$ISO_NAME" \
  -R -J -l \
  -e EFI/boot/bootx64.efi \
  -no-emul-boot \
  -append_partition 2 0xef "$ESP_IMG" \
  "$WORK_DIR"

echo "ISO built at: $ISO_OUTPUT_DIR/$ISO_NAME"